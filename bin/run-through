#!/usr/bin/env ruby

require 'optparse'
require 'timeout'

SCRIPT_NAME = File.basename(__FILE__)

module RunThroughCLI
  class ShellCommand
    def initialize(command)
      @command = command
    end

    def run(dry_run:, files:, verbose:)
      cmd = "#{@command} #{files.join(' ')}"
      if dry_run
        puts "Would run: #{cmd}"
        true
      else
        system(cmd)
      end
    end
  end

  class BundleExecCommand < ShellCommand
    def initialize(command)
      @command = "bundle exec #{command}"
    end
  end
end

options = {
  commands: [],
  dry_run: false,
  individual: false,
  verbose: false,
}

OptionParser.new do |opts|
  bundle_exec_command_description = "A command to run execute on arguments using bundle exec. Can be passed multiple times."
  opts.on("-b", "--bundle-exec-commands=COMMAND", bundle_exec_command_description) do |command|
    options[:commands] << RunThroughCLI::BundleExecCommand.new(command)
  end

  command_description = "A command to execute on arguments. Can be passed multiple times"
  opts.on("-c", "--command=COMMAND", command_description) do |command|
    options[:commands] << RunThroughCLI::ShellCommand.new(command)
  end

  opts.on("-i", "--individual", "Run each command once per file rather than once per all files") do
    options[:individual] = true
  end

  opts.on("-n", "--dry-run", "Perform a dry run and print out what would happen") do
    options[:dry_run] = true
  end

  opts.on("-h", "--help") do
    puts <<~HELP
      #{SCRIPT_NAME} runs files through shell commands

      Example:

        # Run all *.rb files in spec/ through rubocop and
        # reek.
        find spec -name "*.rb" | xargs run-through -c rubocop -c reek

        # Run all *.rb files in spec/ through rubocop and
        # reek with bundle exec.
        find spec -name "*.rb" | xargs run-through -b rubocop -b reek

    HELP
    puts opts
    exit
  end
end.parse!


def group_files(files, individual:)
  if individual
    files.map { |file| [file] }
  else
    [files]
  end
end


files = Timeout.timeout(0.5) { STDIN.read.split("\n") } rescue nil
files ||= ARGV.dup

file_groups = group_files(files, individual: options[:individual])

success = true
file_groups.each do |files|
  options[:commands].each do |command|
    success = command.run(
      dry_run: options[:dry_run],
      files: files,
      verbose: options[:verbose]
    ) && success
  end
end

if success
  exit(0)
else
  exit(1)
end
