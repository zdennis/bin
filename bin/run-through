#!/usr/bin/env ruby

require 'optparse'

SCRIPT_NAME = File.basename(__FILE__)

def yellow(str)
  "\e[33m#{str}\e[0m"
end

# Taken from with_env gem:
# https://github.com/mhs/with_env-rb/blob/master/lib/with_env.rb
module WithEnv
  extend self

  def with_env(env, &blk)
    before = ENV.to_h.dup
    env.each { |k, v| ENV[k] = v }
    yield
  ensure
    ENV.replace(before)
  end

  def without_env(*keys, &blk)
    before = ENV.to_h.dup
    keys.flatten.each { |k| ENV.delete(k) }
    yield
  ensure
    ENV.replace(before)
  end
end

module RunThroughCLI
  class ShellCommand
    def initialize(command)
      @command = command
    end

    def run(dry_run:, env:, files:, verbose:)
      cmd = "#{@command} #{files.join(' ')}"
      if dry_run
        pretty_env = env.to_a.map { |arr| arr.join('=') }.join(' ')
        puts <<~STR
          #{yellow('Would run:')} #{pretty_env} #{cmd}
        STR
        true
      else
        WithEnv.with_env(env) do
          system(cmd)
        end
      end
    end
  end

  class BundleExecCommand < ShellCommand
    def initialize(command)
      @command = "bundle exec #{command}"
    end
  end
end

options = {
  commands: [],
  dry_run: false,
  individual: false,
  verbose: false,
  env: {}
}

OptionParser.new do |opts|
  bundle_exec_command_description = "A command to run execute on arguments using bundle exec. Can be passed multiple times."
  opts.on("-b", "--bundle-exec-commands=COMMAND", bundle_exec_command_description) do |command|
    options[:commands] << RunThroughCLI::BundleExecCommand.new(command)
  end

  command_description = "A command to execute on arguments. Can be passed multiple times"
  opts.on("-c", "--command=COMMAND", command_description) do |command|
    options[:commands] << RunThroughCLI::ShellCommand.new(command)
  end

  opts.on("-e", "--env-var=ENVVAR", "Sets an env var, e.g. VAR=VAL") do |arg|
    var, val = arg.split("=", 2)
    options.fetch(:env)[var] = val
  end

  opts.on("-i", "--individual", "Run each command once per file rather than once per all files") do
    options[:individual] = true
  end

  opts.on("-n", "--dry-run", "Perform a dry run and print out what would happen") do
    options[:dry_run] = true
  end

  opts.on("-h", "--help") do
    puts <<~HELP
      #{SCRIPT_NAME} runs files through shell commands

      Example:

        # Run all *.rb files in spec/ through rubocop and
        # reek.
        find spec -name "*.rb" | xargs run-through -c rubocop -c reek

        # Run all *.rb files in spec/ through rubocop and
        # reek with bundle exec.
        find spec -name "*.rb" | xargs run-through -b rubocop -b reek

    HELP
    puts opts
    exit
  end
end.parse!


def group_files(files, individual:)
  if individual
    files.map { |file| [file] }
  else
    [files]
  end
end

file_groups = group_files(ARGV.dup, individual: options[:individual])
success = true
file_groups.each do |files|
  options[:commands].each do |command|
    success = command.run(
      dry_run: options[:dry_run],
      files: files,
      verbose: options[:verbose],
      env: options.fetch(:env)
    ) && success
  end
end

if success
  exit(0)
else
  exit(1)
end
