#!/usr/bin/env ruby

require 'optparse'

SCRIPT_NAME = File.basename(__FILE__)

options = {
  bundle_exec_commands: [],
  commands: [],
  individual: false,
  verbose: false,
}

OptionParser.new do |opts|
  bundle_exec_command_description = "A command to run execute on arguments using bundle exec. Can be passed multiple times."
  opts.on("-b", "--bundle-exec-commands=COMMAND", bundle_exec_command_description) do |command|
    options[:bundle_exec_commands] << command
  end

  command_description = "A command to execute on arguments. Can be passed multiple times"
  opts.on("-c", "--command=COMMAND", command_description) do |command|
    options[:commands] << command
  end

  opts.on("-i", "--individual", "Run each command once per file rather than once per all files") do
    options[:individual] = true
  end

  opts.on("-V", "--verbose", "Prints out the commands being executed") do
    options[:verbose] = true
  end

  opts.on("-h", "--help") do
    puts <<~HELP
      #{SCRIPT_NAME} runs files through shell commands

      Example:

        # Run all *.rb files in spec/ through rubocop and
        # reek.
        find spec -name "*.rb" | xargs run-through -c rubocop -c reek

        # Run all *.rb files in spec/ through rubocop and
        # reek with bundle exec.
        find spec -name "*.rb" | xargs run-through -b rubocop -b reek

    HELP
    puts opts
    exit
  end
end.parse!

def run_command(command, verbose:)
  puts "RUNNING COMMAND: #{command}" if verbose
  system(command)
end

def group_files(files, individual:)
  if individual
    files.map { |file| [file] }
  else
    [files]
  end
end

file_groups = group_files(ARGV.dup, individual: options[:individual])
success = true
file_groups.each do |files|
  files_for_command = files.join(' ')
  options[:commands].each do |command|
    success = run_command("#{command} #{files_for_command}", verbose: options[:verbose]) && success
  end

  options[:bundle_exec_commands].each do |command|
    success = run_command("bundle exec #{command} #{files_for_command}", verbose: options[:verbose]) && success
  end
end

if success
  exit(0)
else
  exit(1)
end
